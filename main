import tkinter as tk
import math
from tkinter import *
import random


class p_m_game:  # Klase kad spēlētājs sāk un dators izmanto Alpha-Beta
    def __init__(self, master, n):
        self.master = master
        self.n = n
        self.buttons = []
        self.selected_buttons = []
        self.locked_buttons = []
        self.canvas = tk.Canvas(master, width=400, height=400)
        self.canvas.pack()
        self.is_player_turn = True
        self.player_sods = 0
        self.computer_sods = 0
        self.generate_buttons()

    def generate_buttons(self):
        for i in range(self.n):
            angle = i * (360 / self.n)
            x = 200 + 150 * math.cos(math.radians(angle))
            y = 200 + 150 * math.sin(math.radians(angle))
            button = tk.Button(self.master, text=str(i + 1), command=lambda i=i: self.player_click(i))
            button.place(x=x, y=y)
            self.buttons.append(button)

    def player_click(self, i):
        if self.is_player_turn == True:
            button = self.buttons[i]
            if len(self.selected_buttons) < 2:
                button.config(bg="red")
                button.config(command=lambda: None)
                self.selected_buttons.append(button)
                self.locked_buttons.append(button)
                if len(self.selected_buttons) == 2:
                    self.draw_line()
                    self.selected_buttons.clear()
                    self.is_player_turn = False
                    self.master.after(1000, self.computer_turn)

    def computer_turn(self):
        if self.is_player_turn == False:
            non_locked_buttons = [x for x in self.buttons if x not in self.locked_buttons]
            available_buttons = [y for y in non_locked_buttons if y not in self.selected_buttons]

            selected_buttons = random.sample(available_buttons, 2)  # šito vajadzēs aizvietot ar MINMAX algoritmu

            for button in selected_buttons:
                self.selected_buttons.append(button)
                self.locked_buttons.append(button)
                button.config(bg="blue")
                button.config(command=lambda: None)
            self.draw_line()
            self.selected_buttons.clear()
            self.is_player_turn = True

    def draw_line(self):
        x1 = self.selected_buttons[0].winfo_x() + self.selected_buttons[0].winfo_width() / 2
        y1 = self.selected_buttons[0].winfo_y() + self.selected_buttons[0].winfo_height() / 2
        x2 = self.selected_buttons[1].winfo_x() + self.selected_buttons[1].winfo_width() / 2
        y2 = self.selected_buttons[1].winfo_y() + self.selected_buttons[1].winfo_height() / 2
        self.canvas.create_line(x1, y1, x2, y2, fill="black", width=1)


class c_m_game:  # Klase kad dators sāk un dators izmanto minmax
    def __init__(self, master, n):
        self.master = master
        self.n = n
        self.buttons = []
        self.selected_buttons = []
        self.locked_buttons = []
        self.canvas = tk.Canvas(master, width=400, height=400)
        self.canvas.pack()
        self.is_player_turn = False
        self.player_sods = 0
        self.computer_sods = 0
        self.generate_buttons()
        self.computer_turn()

    def generate_buttons(self):
        for i in range(self.n):
            angle = i * (360 / self.n)
            x = 200 + 150 * math.cos(math.radians(angle))
            y = 200 + 150 * math.sin(math.radians(angle))
            button = tk.Button(self.master, text=str(i + 1), command=lambda i=i: self.player_click(i))
            button.place(x=x, y=y)
            self.buttons.append(button)

    def player_click(self, i):
        if self.is_player_turn == True:
            button = self.buttons[i]
            if len(self.selected_buttons) < 2:
                button.config(bg="red")
                button.config(command=lambda: None)
                self.selected_buttons.append(button)
                self.locked_buttons.append(button)
                if len(self.selected_buttons) == 2:
                    self.draw_line()
                    self.selected_buttons.clear()
                    self.is_player_turn = False
                    self.master.after(1000, self.computer_turn)

    def computer_turn(self):
        if self.is_player_turn == False:
            non_locked_buttons = [x for x in self.buttons if x not in self.locked_buttons]
            available_buttons = [y for y in non_locked_buttons if y not in self.selected_buttons]

            selected_buttons = random.sample(available_buttons, 2)  # šito vajadzēs aizvietot ar MINMAX algoritmu

            for button in selected_buttons:
                self.selected_buttons.append(button)
                self.locked_buttons.append(button)
                button.config(bg="blue")
                button.config(command=lambda: None)
            self.draw_line()
            self.selected_buttons.clear()
            self.is_player_turn = True

    def draw_line(self):
        x1 = self.selected_buttons[0].winfo_x() + self.selected_buttons[0].winfo_width() / 2
        y1 = self.selected_buttons[0].winfo_y() + self.selected_buttons[0].winfo_height() / 2
        x2 = self.selected_buttons[1].winfo_x() + self.selected_buttons[1].winfo_width() / 2
        y2 = self.selected_buttons[1].winfo_y() + self.selected_buttons[1].winfo_height() / 2
        self.canvas.create_line(x1, y1, x2, y2, fill="black", width=1)


class p_a_game:  # Klase kad spēlētājs sāk un dators izmanto Alpha-Beta
    def __init__(self, master, n):
        self.master = master
        self.n = n
        self.buttons = []
        self.selected_buttons = []
        self.locked_buttons = []
        self.canvas = tk.Canvas(master, width=400, height=400)
        self.canvas.pack()
        self.is_player_turn = True
        self.player_sods = 0
        self.computer_sods = 0
        self.generate_buttons()

    def generate_buttons(self):
        for i in range(self.n):
            angle = i * (360 / self.n)
            x = 200 + 150 * math.cos(math.radians(angle))
            y = 200 + 150 * math.sin(math.radians(angle))
            button = tk.Button(self.master, text=str(i + 1), command=lambda i=i: self.player_click(i))
            button.place(x=x, y=y)
            self.buttons.append(button)

    def player_click(self, i):
        if self.is_player_turn == True:
            button = self.buttons[i]
            if len(self.selected_buttons) < 2:
                button.config(bg="red")
                button.config(command=lambda: None)
                self.selected_buttons.append(button)
                self.locked_buttons.append(button)
                if len(self.selected_buttons) == 2:
                    self.draw_line()
                    self.selected_buttons.clear()
                    self.is_player_turn = False
                    self.master.after(1000, self.computer_turn)

    def computer_turn(self):
        if self.is_player_turn == False:
            non_locked_buttons = [x for x in self.buttons if x not in self.locked_buttons]
            available_buttons = [y for y in non_locked_buttons if y not in self.selected_buttons]

            selected_buttons = random.sample(available_buttons, 2)  # āito vajadzēs aizvietot ar ALPHA-BETA algoritmu

            for button in selected_buttons:
                self.selected_buttons.append(button)
                self.locked_buttons.append(button)
                button.config(bg="blue")
                button.config(command=lambda: None)
            self.draw_line()
            self.selected_buttons.clear()
            self.is_player_turn = True

    def draw_line(self):
        x1 = self.selected_buttons[0].winfo_x() + self.selected_buttons[0].winfo_width() / 2
        y1 = self.selected_buttons[0].winfo_y() + self.selected_buttons[0].winfo_height() / 2
        x2 = self.selected_buttons[1].winfo_x() + self.selected_buttons[1].winfo_width() / 2
        y2 = self.selected_buttons[1].winfo_y() + self.selected_buttons[1].winfo_height() / 2
        self.canvas.create_line(x1, y1, x2, y2, fill="black", width=1)


class c_a_game:  # Klase kad dators sāk un dators izmanto alpha-beta
    def __init__(self, master, n):
        self.master = master
        self.n = n
        self.buttons = []
        self.selected_buttons = []
        self.locked_buttons = []
        self.canvas = tk.Canvas(master, width=400, height=400)
        self.canvas.pack()
        self.is_player_turn = False
        self.player_sods = 0
        self.computer_sods = 0
        self.generate_buttons()
        self.computer_turn()

    def generate_buttons(self):
        for i in range(self.n):
            angle = i * (360 / self.n)
            x = 200 + 150 * math.cos(math.radians(angle))
            y = 200 + 150 * math.sin(math.radians(angle))
            button = tk.Button(self.master, text=str(i + 1), command=lambda i=i: self.player_click(i))
            button.place(x=x, y=y)
            self.buttons.append(button)

    def player_click(self, i):
        if self.is_player_turn == True:
            button = self.buttons[i]
            if len(self.selected_buttons) < 2:
                button.config(bg="red")
                button.config(command=lambda: None)
                self.selected_buttons.append(button)
                self.locked_buttons.append(button)
                if len(self.selected_buttons) == 2:
                    self.draw_line()
                    self.selected_buttons.clear()
                    self.is_player_turn = False
                    self.master.after(1000, self.computer_turn)

    def computer_turn(self):
        if self.is_player_turn == False:
            non_locked_buttons = [x for x in self.buttons if x not in self.locked_buttons]
            available_buttons = [y for y in non_locked_buttons if y not in self.selected_buttons]

            selected_buttons = random.sample(available_buttons, 2)  # šito vajadzēs aizvietot ar ALPHABETA algoritmu

            for button in selected_buttons:
                self.selected_buttons.append(button)
                self.locked_buttons.append(button)
                button.config(bg="blue")
                button.config(command=lambda: None)
            self.draw_line()
            self.selected_buttons.clear()
            self.is_player_turn = True

    def draw_line(self):
        x1 = self.selected_buttons[0].winfo_x() + self.selected_buttons[0].winfo_width() / 2
        y1 = self.selected_buttons[0].winfo_y() + self.selected_buttons[0].winfo_height() / 2
        x2 = self.selected_buttons[1].winfo_x() + self.selected_buttons[1].winfo_width() / 2
        y2 = self.selected_buttons[1].winfo_y() + self.selected_buttons[1].winfo_height() / 2
        self.canvas.create_line(x1, y1, x2, y2, fill="black", width=1)


def p_m_start():
    l.destroy()
    p_m_game(logs, n)


def c_m_start():
    l.destroy()
    c_m_game(logs, n)


def p_a_start():
    l.destroy()
    p_a_game(logs, n)


def c_a_start():
    l.destroy()


def click_ok():
    sk = slide.get()
    global n
    n = sk
    slide.destroy()
    btn_ok.destroy()
    l.config(text="Choose who will start")

    def click_c():
        l.config(text="Choose algorithm")
        button_c.config(text="ALPHA-BETA", command=lambda: [button_c.destroy(), button_p.destroy(), c_a_start()])
        button_p.config(text="MIN-MAX", command=lambda: [button_c.destroy(), button_p.destroy(), c_m_start()])

    button_c = Button(logs, text="COMPUTER", command=click_c)
    button_c.pack(side='left', expand=True)

    def click_p():
        l.config(text="Choose algorithm")
        button_c.config(text="ALPHA-BETA", command=lambda: [button_c.destroy(), button_p.destroy(), p_a_start()])
        button_p.config(text="MIN-MAX", command=lambda: [button_c.destroy(), button_p.destroy(), p_m_start()])

    button_p = Button(logs, text="PLAYER", command=click_p)
    button_p.pack(side='right', expand=True)


logs = tk.Tk()
logs.title("Game 41")
logs.geometry("400x400")
l = Label(logs, text="Choose number of fields", font=("Arial", 12))
l.pack()
slide = Scale(logs, from_=15, to=25, orient=HORIZONTAL)
slide.pack(pady=40)
btn_ok = Button(logs, text="OK", command=click_ok)
btn_ok.pack()

logs.mainloop()
